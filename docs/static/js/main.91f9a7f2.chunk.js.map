{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","fetch","encodeURI","resp","json","data","gifs","map","img","id","title","url","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","key","GifExpertApp","categories","cat","ReactDOM","render","document","getElementById"],"mappings":"4LA4BeA,EA1BK,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EACLC,mBAAS,IADJ,mBAClCC,EADkC,KACtBC,EADsB,KAezC,OACE,sBAAMC,SATa,SAACC,GACpBA,EAAEC,iBACEJ,EAAWK,OAAOC,OAAS,IAC7BR,GAAc,SAACS,GAAD,OAAWP,GAAX,mBAA0BO,OACxCN,EAAc,MAKhB,SACE,uBAAOO,KAAK,OAAOC,MAAOT,EAAYU,SAdhB,SAACP,GACzBF,EAAcE,EAAEQ,OAAOF,a,8BCNdG,EAAO,uCAAG,WAAOC,GAAP,qBAAAC,EAAA,4DACL,mCACJ,uCACE,GAHO,SAKFC,MAAM,GAAD,OAHZ,uCAGY,cACVC,UAAUH,GADA,kBAFV,GAEU,oBAJR,qCADK,cAKfI,EALe,gBAQEA,EAAKC,OARP,uBAQbC,EARa,EAQbA,KAEFC,EAAOD,EAAKE,KAAI,SAACC,GAAD,YAAU,CAC9BC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXC,IAAG,UAAEH,EAAII,cAAN,aAAE,EAAYC,iBAAiBF,QAbf,kBAgBdL,GAhBc,4CAAH,sDCWLQ,EATK,SAAC,GAAoB,IAAlBJ,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,IAC5B,OACE,sBAAKI,UAAU,6CAAf,UACE,qBAAKC,IAAKL,EAAKM,IAAKP,IACpB,4BAAIA,QCiBKQ,EAlBC,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAAe,ECHN,SAACA,GAAc,IAAD,EACdd,mBAAS,CAAEoB,KAAM,GAAIc,SAAS,IADhB,mBACjCC,EADiC,KAC1BC,EAD0B,KAOxC,OAJAC,qBAAU,WACRxB,EAAQC,GAAUwB,MAAK,SAACC,GAAD,OAAUH,EAAS,CAAEhB,KAAMmB,EAAML,SAAS,SAChE,CAACpB,IAEGqB,EDH2BK,CAAa1B,GAAjCa,EADkB,EACxBP,KAAcc,EADU,EACVA,QAEtB,OACE,qCACE,oBAAIJ,UAAU,+CAAd,SACGhB,IAEFoB,GAAW,mBAAGJ,UAAU,mCAAb,qBACZ,qBAAKA,UAAU,YAAf,SACGH,EAAOL,KAAI,SAACC,GAAD,OACV,wBAAC,EAAD,2BAAiBA,GAAjB,IAAsBkB,IAAKlB,EAAIC,eEM1BkB,EAlBM,WAAO,IAAD,EACW1C,mBAAS,CAAC,oBADrB,mBAClB2C,EADkB,KACN5C,EADM,KAGzB,OACE,qCACE,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBAEA,6BACG4C,EAAWrB,KAAI,SAACsB,GAAD,OACd,cAAC,EAAD,CAAS9B,SAAU8B,GAAUA,Y,MCVvCC,IAASC,OACP,cAAC,EAAD,IAEAC,SAASC,eAAe,W","file":"static/js/main.91f9a7f2.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nconst AddCategory = ({ setCategories }) => {\r\n  const [inputValue, setInputValue] = useState(\"\");\r\n\r\n  const handleInputChange = (e) => {\r\n    setInputValue(e.target.value);\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    if (inputValue.trim().length > 2) {\r\n      setCategories((cats) => [inputValue, ...cats]);\r\n      setInputValue(\"\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <input type=\"text\" value={inputValue} onChange={handleInputChange} />\r\n    </form>\r\n  );\r\n};\r\n\r\nAddCategory.propTypes = {\r\n  setCategories: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default AddCategory;\r\n","export const getGifs = async (category) => {\r\n  const API_KEY = \"DykV5GZ9qVrpuiZMJr7ntkjJYmml4MZu\";\r\n  const URL = \"https://api.giphy.com/v1/gifs/search\";\r\n  const limit = 10;\r\n\r\n  const resp = await fetch(\r\n    `${URL}?q=${encodeURI(category)}&limit=${limit}&api_key=${API_KEY}`\r\n  );\r\n  const { data } = await resp.json();\r\n\r\n  const gifs = data.map((img) => ({\r\n    id: img.id,\r\n    title: img.title,\r\n    url: img.images?.downsized_medium.url,\r\n  }));\r\n\r\n  return gifs;\r\n};\r\n","import React from \"react\";\r\n\r\nconst GifGridItem = ({ title, url }) => {\r\n  return (\r\n    <div className=\"card animate__animated animate__backInLeft\">\r\n      <img src={url} alt={title} />\r\n      <p>{title}</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GifGridItem;\r\n","import React from \"react\";\r\nimport { useFetchGifs } from \"../hooks/useFetchGifs\";\r\n\r\nimport GifGridItem from \"./GifGridItem\";\r\n\r\nconst GifGrid = ({ category }) => {\r\n  const { data: images, loading } = useFetchGifs(category);\r\n\r\n  return (\r\n    <>\r\n      <h3 className=\"animate__animated animate__lightSpeedInRight\">\r\n        {category}\r\n      </h3>\r\n      {loading && <p className=\"animate__animated animate__flash\">Loading</p>}\r\n      <div className=\"card-grid\">\r\n        {images.map((img) => (\r\n          <GifGridItem {...img} key={img.id} />\r\n        ))}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default GifGrid;\r\n","import { useState, useEffect } from \"react\";\r\nimport { getGifs } from \"../helpers/getGifs\";\r\nexport const useFetchGifs = (category) => {\r\n  const [state, setState] = useState({ data: [], loading: true });\r\n\r\n  useEffect(() => {\r\n    getGifs(category).then((imgs) => setState({ data: imgs, loading: false }));\r\n  }, [category]);\r\n\r\n  return state;\r\n};\r\n","import React, { useState } from \"react\";\r\nimport AddCategory from \"./components/AddCategory\";\r\nimport GifGrid from \"./components/GifGrid\";\r\n\r\nconst GifExpertApp = () => {\r\n  const [categories, setCategories] = useState([\"Attack On Titan\"]);\r\n\r\n  return (\r\n    <>\r\n      <h2>GifExpertApp</h2>\r\n      <AddCategory setCategories={setCategories} />\r\n      <hr />\r\n\r\n      <ol>\r\n        {categories.map((cat) => (\r\n          <GifGrid category={cat} key={cat} />\r\n        ))}\r\n      </ol>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default GifExpertApp;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport GifExpertApp from \"./GifExpertApp\";\n\nimport \"./index.css\";\nReactDOM.render(\n  <GifExpertApp />,\n\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}